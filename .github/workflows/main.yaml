  # Uncomment this once LLVM toolchain is added to the CI
  # docs:
  #   name: Docs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: 1.45.0
  #         override: true
  #         components: rustfmt, clippy
  #     - run: make doc-local

name: core tests

env:
  RUST_BACKTRACE: 1

on:
  push:
    branches:
      - 'master'
      - 'staging'
      - 'trying'
jobs:
  test:
    name: Test on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows, linux-arm]
        include:
          - build: linux
            os: ubuntu-latest
            rust: 1.45.0
          - build: macos
            os: macos-latest
            rust: 1.45.0
          - build: windows
            os: windows-latest
            rust: 1.45.0
          - build: linux-arm
            os: [self-hosted, linux, ARM64]
            rust: 1.45.2
    env:
      CARGO_SCCACHE_VERSION: 0.2.13
      SCCACHE_AZURE_BLOB_CONTAINER: wasmerstoragesccacheblob
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"
      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the git repo always get rebuilt
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.rust }}-
      # # Install sccache
      # - uses: actions/cache@master
      #   with:
      #     path: ${{ runner.tool_cache }}/cargo-sccache
      #     key: cargo-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}
      # - name: Install sccache
      #   run: |
      #     echo "::add-path::${{ runner.tool_cache }}/cargo-sccache/bin"
      #     cargo install sccache --version ${{ env.CARGO_SCCACHE_VERSION }} --root ${{ runner.tool_cache }}/cargo-sccache
      # - name: Start sccache
      #   run: |
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sscache -s
      #     echo "::set-env name=RUSTC_WRAPPER::${{ runner.tool_cache }}/cargo-sccache/bin/sccache"
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install llvm
        # run: |
        #   curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe -L -o llvm-installer.exe
        #   7z x llvm-installer.exe -oC:/llvm-10
        #   echo ::add-path::C:/llvm-10/bin
        #   echo ::set-env name=LLVM_SYS_100_PREFIX::C:/llvm-10
        #   echo ::set-env name=LIBCLANG_PATH::C:/llvm-10/bin/libclang.dll
      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz -L -o llvm.tar.xz
          mkdir -p ${{ env.LLVM_DIR }}
          tar xf llvm.tar.xz --strip-components=1 -C ${{ env.LLVM_DIR }}
          echo "::add-path::${{ env.LLVM_DIR }}/bin"
          echo "::set-env name=LLVM_SYS_100_PREFIX::${{ env.LLVM_DIR }}"
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm-10
      - name: Install LLVM (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz -L -o llvm.tar.xz
          mkdir -p /opt/llvm-10
          tar xf llvm.tar.xz --strip-components=1 -C /opt/llvm-10
          echo ::add-path::/opt/llvm-10/bin
          echo ::set-env name=LLVM_SYS_100_PREFIX::/opt/llvm-10
      - name: Set up dependencies for Mac OS
        run: brew install automake
        if: matrix.os == 'macos-latest'
      - run: make test
      - name: Build and Test C API
        run: |
          make build-capi
          make test-capi-cranelift
        if: matrix.os != 'windows-latest'
      - name: Build C API on Windows
        run: make build-capi
        if: matrix.os == 'windows-latest'
      - name: Build Wasmer binary
        run: |
          make build-wasmer
          # TODO: build wapm
          # make build-wapm
          make package

  audit:
    name: Audit
    env:
      CARGO_AUDIT_VERSION: 0.12.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@master
        with:
          path: ${{ runner.tool_cache }}/cargo-audit
          key: cargo-audit-bin-${{ env.CARGO_AUDIT_VERSION }}
      - run: |
          echo "::add-path::${{ runner.tool_cache }}/cargo-audit/bin"
      - run: |
          cargo install cargo-audit --version ${{ env.CARGO_AUDIT_VERSION }} --root ${{ runner.tool_cache }}/cargo-audit
          cargo audit
